Práctica 1 - Ordenación de un vector partiendo de distintas ordenaciones iniciales


  Autores:
  - Daniel José García Paz
  - Damian Botana Otero

------------------------------------------------------------------------------>

 · Introducción:

 El objetivo de esta práctica es comparar la complejidad computacional de dos
 algoritmos de ordenación (ordenación por inserción y ordenación shell)
 aplicados a vectores de números enteros.

 En primer lugar, hemos implementado en lenguaje C ambos algoritmos. Después
 de verificar que funcionaran de manera correcta, hemos medido los tiempos de
 ejecución (en microsegundos) de los algoritmos sobre tres tipos diferentes de
 vectores: pseudoaletorios, ordenados de manera ascendente y ordenados  de manera
 descendente; de esta manera, hemos podido calcular empíricamente la
 complejidad de cada algoritmo y analizar su comportamiento.

  · Máquina de medición:

 - SO: Ubuntu 20.04 64 bits
        - Procesador: Intel® Core™ i5-8300H a 2.00GHz
        - Memoria RAM: 8 GB


  ·Los tiempos que se usaran en esta práctica serán los MICROSEGUNDOS

·  Análisis:

--------------------------------------------------------------
	VECTOR CON ORDENACION ASCENDENTE
--------------------------------------------------------------

	TIEMPOS DE ORDENACION POR INSERCION

                                 Cota subestimada     Cota ajustada Cota sobrestimada
              n            t(n)       t(n)/n^0.80            t(n)/n       t(n)/n^1.20
(*)         500       1.6310000      0.0113051913      0.0032620000      0.0009412171
(*)        1000       2.7560000      0.0109718329      0.0027560000      0.0006922757
(*)        2000       8.0680000      0.0184476837      0.0040340000      0.0008821242
(*)        4000      11.6660000      0.0153205348      0.0029165000      0.0005552005
(*)        8000      27.3800000      0.0206519665      0.0034225000      0.0005671857
(*)       16000      51.0100000      0.0220983219      0.0031881250      0.0004599505
(*)       32000     104.0110000      0.0258796998      0.0032503438      0.0004082245

                                                   C = 0.0032
*: Tiempo promedio de 1000 ejecuciones del algoritmo

Tabla 1: Estudio de la complejidad de ordenación por inserción en el caso inicialización ascendente.

> Se puede observar que los tiempos no contienen ninguna medición anómala.


   TIEMPOS DE ORDENACION POR SHELL

                                 Cota subestimada     Cota ajustada Cota sobrestimada
              n            t(n)            t(n)/n     t(n)/n*log(n)       t(n)/n^2.00
(*)         500      14.0180000      0.0280360000      0.0045113063      0.0000560720
(*)        1000      33.1950000      0.0331950000      0.0048054684      0.0000331950
(*)        2000      72.0060000      0.0360030000      0.0047366745      0.0000180015
(*)        4000     154.2830000      0.0385707500      0.0046504122      0.0000096427
(*)        8000     331.1360000      0.0413920000      0.0046056628      0.0000051740
          16000     709.0000000      0.0443125000      0.0045775750      0.0000027695
          32000    1631.0000000      0.0509687500      0.0049133651      0.0000015928

                                                   C = 0.0046
*: Tiempo promedio de 1000 ejecuciones del algoritmo

Tabla 2: Estudio de la complejidad de ordenacion por shell en el caso inicializacion ascente.

> Se puede observar que los tiempos no contienen ninguna medición anómala.

  DISCUSION:

    En las dos tablas se puede observar que los valores crecen de manera infinita
  para la cota subestimada, al mismo tiempo que para la cota sobrestimada los
  valores tienden a cero según va aumentando el tamaño del vector.

    En lo que se refiere a la cota ajustada observamos que los valores se
  estabilizan entorno a una constante (C) quedando demostrado que para el
  caso de la ordenación de un vector previamente ordenado es mas eficiente el
  algoritmo de ordenación por inserción con una complejidad O(n) frente al de
  shell, con una complejidad que tiende a O(n.log n).

--------------------------------------------------------------
  VECTOR CON ORDENACION DESCENDENTE
--------------------------------------------------------------

  TIEMPOS DE ORDENACION POR INSERCION

                                 Cota subestimada     Cota ajustada Cota sobrestimada
              n            t(n)       t(n)/n^1.80       t(n)/n^2.00       t(n)/n^2.20
(*)         500     283.5660000      0.0039310472      0.0011342640      0.0003272804
           1000    1105.0000000      0.0043990856      0.0011050000      0.0002775634
           2000    4603.0000000      0.0052624400      0.0011507500      0.0002516372
           4000   20426.0000000      0.0067061850      0.0012766250      0.0002430251
           8000   75688.0000000      0.0071361711      0.0011826250      0.0001959877
          16000  285538.0000000      0.0077312221      0.0011153828      0.0001609162
          32000 1133156.0000000      0.0088108937      0.0011065977      0.0001389823

                                                   C = 0.0011
*: Tiempo promedio de 1000 ejecuciones del algoritmo

Tabla 3: Estudio de la complejidad de ordenación por inserción en el caso inicialización descendente.

> Se puede observar que los tiempos no contienen ninguna medición anómala.

  TIEMPOS DE ORDENACION POR SHELL

                                 Cota subestimada     Cota ajustada Cota sobrestimada
              n            t(n)            t(n)/n     t(n)/n*log(n)       t(n)/n^2.00
(*)         500      21.7910000      0.0435820000      0.0070128318      0.0000871640
(*)        1000      47.6690000      0.0476690000      0.0069007945      0.0000476690
(*)        2000     103.5420000      0.0517710000      0.0068111650      0.0000258855
(*)        4000     223.8040000      0.0559510000      0.0067459204      0.0000139878
(*)        8000     485.5240000      0.0606905000      0.0067529952      0.0000075863
          16000    1041.0000000      0.0650625000      0.0067210940      0.0000040664
          32000    2361.0000000      0.0737812500      0.0071124801      0.0000023057

                                                   C = 0.0068
*: Tiempo promedio de 1000 ejecuciones del algoritmo

Tabla 4: Estudio de la complejidad de ordenación por shell en el caso inicialización descendente.

> Se puede observar que los tiempos no contienen ninguna medición anómala.

  DISCUSION:

    En las dos tablas se puede observar que los valores crecen de manera infinita
  para la cota subestimada, al mismo tiempo que para la cota sobrestimada los
  valores tienden a cero según va aumentando el tamaño del vector.

    En lo que se refiere a la cota ajustada observamos que los valores se
  estabilizan entorno a una constante (C) quedando demostrado que para el
  caso de la ordenación de un vector previamente ordenado es mas eficiente el
  algoritmo de ordenación por shell con una complejidad O(n.log n) frente al de
  shell, con una complejidad que tiende a O(n^2).

--------------------------------------------------------------
	VECTOR CON ORDENACION ALEATORIA
--------------------------------------------------------------

	TIEMPOS DE ORDENACION POR INSERCION

                                 Cota subestimada     Cota ajustada Cota sobrestimada
              n            t(n)       t(n)/n^1.80       t(n)/n^2.00       t(n)/n^2.20
(*)         500     145.8660000      0.0020221258      0.0005834640      0.0001683526
           1000     611.0000000      0.0024324356      0.0006110000      0.0001534762
           2000    2277.0000000      0.0026032100      0.0005692500      0.0001244792
           4000    8857.0000000      0.0029078958      0.0005535625      0.0001053791
           8000   40077.0000000      0.0037786218      0.0006262031      0.0001037760
          16000  145102.0000000      0.0039287793      0.0005668047      0.0000817729
          32000  607424.0000000      0.0047230463      0.0005931875      0.0000745009

                                                   C = 0.00058
*: Tiempo promedio de 1000 ejecuciones del algoritmo

Tabla 5: Estudio de la complejidad de ordenacion por insercion en el caso inicializacion alectoria.

> Se puede observar que los tiempos no contienen ninguna medición anómala.


  TIEMPOS DE ORDENACION POR SHELL

                                 Cota subestimada     Cota ajustada Cota sobrestimada
              n            t(n)            t(n)/n       t(n)/n^1.20       t(n)/n^1.50
(*)         500      55.7130000      0.1114260000      0.0321508455      0.0049831222
(*)        1000     128.6900000      0.1286900000      0.0323254560      0.0040695350
(*)        2000     288.8340000      0.1444170000      0.0315800022      0.0032292623
           4000     711.0000000      0.1777500000      0.0338374358      0.0028104742
           8000    1633.0000000      0.2041250000      0.0338281330      0.0022821869
          16000    3552.0000000      0.2220000000      0.0320279230      0.0017550641
          32000    8837.0000000      0.2761562500      0.0346836392      0.0015437604

                                                   C = 0.033
*: Tiempo promedio de 1000 ejecuciones del algoritmo

Tabla 6: Estudio de la complejidad de ordenacion por shell en el caso inicializacion alectoria.

> Se puede observar que los tiempos no contienen ninguna medición anómala.

  DISCUSION:

    En las dos tablas se puede observar que los valores crecen de manera infinita
  para la cota subestimada, al mismo tiempo que para la cota sobrestimada los
  valores tienden a cero según va aumentando el tamaño del vector.

    En lo que se refiere a la cota ajustada observamos que los valores se
  estabilizan entorno a una constante (C) quedando demostrado que para el
  caso de la ordenación de un vector previamente ordenado es mas eficiente el
  algoritmo de ordenación por shell con una complejidad que se tiende a O(n^1.2))
  frente al de shell, con una complejidad que tiende a O(n^2).

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

  CONCLUSION:

    Después de realizar todas las mediciones podemos concluir que el algoritmo
  de ordenación mas eficiente es el de Shell. Si bien es cierto que, en el caso
  en el que el vector tenía una ordenación inicial ascendente, fue el algoritmo
  de inserción el mas rápido debido a que no tiene que realizar ninguna ordenación
  y solo recorre el vector, se puede concluir que el mas eficiente es el de shell
  ya que en los demás casos, en los que el algoritmo si tenia que llevar a cabo una
  ordenación, el algoritmo demuestra ser mucho mas eficiente.

    También podemos observar que, mientras la complejidad del algoritmo de
  ordenación por Shell tiende a O(n.log n) en el mejor caso y a O(n^1.2) en el
  peor, la complejidad del algoritmo de ordenación por inserción tiende a O(n)
  en el mejor caso y a O(n^2) en el peor.

    Esto explica los resultados obtenidos ya que en el caso en el que ambos
  tuvieron una complejidad optima el algoritmo mas eficiente fue el de
  inserción ya que, mientras este crecía linealmente ajustándose a O(n), el
  de shell lo hacia ajustándose a O(n.log n). Por contrapartida cuando
  comparamos la situación en la que la complejidad es máxima, observamos que,
  aunque en ambos casos la complejidad se ajusta a una exponencial la
  ordenación por shell se ajusta a O(n^1.2) mientras que por inserción se
  ajusta a O(n^2), haciendo del primero un algoritmo mas eficiente.
